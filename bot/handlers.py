import asyncio
import random
import logging
from collections import defaultdict
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import FSInputFile
from .menus import create_menu, data
from .articles import load_article
from .config import IMAGES_PATH

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–∞—Ö
user_group_messages = defaultdict(list)

# –§—Ä–∞–∑—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—å–∏
MORE_PHRASES = [
    "–ï—â–µ, {name}?",
    "–ß—Ç–æ-—Ç–æ –µ—â–µ, {name}?",
    "–ü—Ä–æ–¥–æ–ª–∂–∏–º, {name}?",
    "{name}, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?",
    "{name}, —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
    "–ß—Ç–æ-—Ç–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?"
]

# –ü–∞—É–∑—ã –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
DELAYS = [1.2, 1.5, 1.7, 1.9, 2.0, 2.1, 2.3, 2.5, 2.7, 3.0]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_and_track(bot, chat_id, text=None, photo=None, reply_markup=None, parse_mode="HTML", track_key=None):
    if photo:
        msg = await bot.send_photo(chat_id, photo=photo, caption=text or "", reply_markup=reply_markup)
    else:
        msg = await bot.send_message(chat_id, text or "", reply_markup=reply_markup, parse_mode=parse_mode)

    if track_key:
        user_group_messages[track_key].append(msg.message_id)

    return msg

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(message: types.Message):
    if message.chat.type != "private":
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name}, {username}): {e}")

    user = message.from_user
    user_id = user.id
    user_name = user.first_name or "–¥—Ä—É–≥"
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    menu_text = data["main_menu"]["message"].format(name=user_name).format(name=user_name)
    await send_and_track(
        bot=message.bot,
        chat_id=message.chat.id,
        text=menu_text,
        reply_markup=create_menu("main_menu", user_id=user_id, is_private=(message.chat.type == "private")),
        track_key=(user_id, message.chat.id) if message.chat.type != "private" else None
    )

# Callback-–∑–∞–ø—Ä–æ—Å—ã
async def handle_callback(callback: types.CallbackQuery):
    raw_callback_data = callback.data
    user = callback.from_user
    user_name = user.first_name or "–¥—Ä—É–≥"
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    user_id = user.id
    chat_type = callback.message.chat.type
    chat_id = callback.message.chat.id
    key = (user_id, chat_id)

    logger.info(f"Callback '{raw_callback_data}' –æ—Ç {user_id} ({user_name}, {username})")

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ callback_data —Å user_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "|" in raw_callback_data:
        callback_data, callback_user_id_str = raw_callback_data.split("|", 1)
        try:
            callback_user_id = int(callback_user_id_str)
            if callback_user_id != user_id:
                await callback.answer("‚õî!!!–®–ê–õ–û–°–¢–¨ –ù–ï –£–î–ê–õ–ê–°–¨!!!‚õî", show_alert=True)
                return
        except ValueError:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ callback_data: {raw_callback_data}")
            return
    else:
        callback_data = raw_callback_data

    for menu_name, menu_data in data.items():
        for row in menu_data["buttons"]:
            for button in row:
                if button.get("callback") == callback_data:
                    if button.get("type") == "menu":
                        menu_text = data[callback_data]["message"].format(name=user_name)

                        if callback.message.chat.type != "private":
                            try:
                                await callback.message.delete()
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é: {e}")

                            await send_and_track(
                                bot=callback.bot,
                                chat_id=callback.message.chat.id,
                                text=menu_text,
                                reply_markup=create_menu(callback_data, user_id=user_id, is_private=False),
                                track_key=(user_id, callback.message.chat.id)
                            )
                            logger.info(f"–ù–æ–≤–æ–µ –º–µ–Ω—é '{callback_data}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        else:
                            await callback.message.edit_text(
                                menu_text,
                                reply_markup=create_menu(callback_data, user_id=user_id, is_private=True)
                            )
                            logger.info(f"–ú–µ–Ω—é '{callback_data}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –õ–° —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return

                    elif button.get("type") == "article":
                        article_parts = await load_article(callback_data)

                        if chat_type != "private":
                            msg = await callback.message.answer("üì© –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Å—Ç–∞—Ç—å—é —Ç–µ–±–µ –≤ –ª–∏—á–∫—É.")
                            user_group_messages[key].append(msg.message_id)

                        try:
                            for part in article_parts:
                                if part["image"]:
                                    image_path = IMAGES_PATH / part["image"]
                                    photo = FSInputFile(str(image_path))
                                    await send_and_track(
                                        callback.bot, user_id,
                                        photo=photo,
                                        track_key=key if chat_type != "private" else None
                                    )
                                    await asyncio.sleep(random.choice(DELAYS))

                                if part["text"]:
                                    await send_and_track(
                                        callback.bot, user_id,
                                        text=part["text"],
                                        track_key=key if chat_type != "private" else None
                                    )
                                    await asyncio.sleep(random.choice(DELAYS))

                            phrase = random.choice(MORE_PHRASES).format(name=user_name)
                            await send_and_track(
                                callback.bot, user_id,
                                text=phrase,
                                reply_markup=create_menu(menu_name, user_id=user_id),
                                track_key=key if chat_type != "private" else None
                            )
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°: {e}")
                            await callback.message.answer(
                                f"‚ùó –Ø –Ω–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –≤ –ª–∏—á–∫—É. –ù–∞–∂–º–∏ Start üëâ @{callback.bot.username}"
                            )
                        return

# –ö–æ–º–∞–Ω–¥–∞ /aa1
async def armant_menu_command(message: types.Message):
    if message.chat.type != "private":
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /aa1 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name}, {username}): {e}")

    user = message.from_user
    user_id = user.id
    user_name = user.first_name or "–¥—Ä—É–≥"
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    menu_name = "armant_menu"
    menu_text = data.get(menu_name, {}).get("message", "–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.").format(name=user_name)
    keyboard = create_menu(menu_name, user_id=user_id, is_private=(message.chat.type == "private"))
    await send_and_track(
        bot=message.bot,
        chat_id=message.chat.id,
        text=menu_text,
        reply_markup=keyboard,
        track_key=(user_id, message.chat.id) if message.chat.type != "private" else None
    )

# –ö–æ–º–∞–Ω–¥–∞ /frolova
async def alice_menu_command(message: types.Message):
    if message.chat.type != "private":
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /frolova –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name}, {username}): {e}")

    user = message.from_user
    user_id = user.id
    user_name = user.first_name or "–¥—Ä—É–≥"
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    menu_name = "alice_menu"
    menu_text = data.get(menu_name, {}).get("message", "–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.").format(name=user_name)
    keyboard = create_menu(menu_name, user_id=user_id)
    await message.answer(menu_text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /—à–∞–ª–æ—Å—Ç—å_—É–¥–∞–ª–∞—Å—å
async def clear_user_messages(message: types.Message):
    if message.chat.type != "private":
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /—à–∞–ª–æ—Å—Ç—å_—É–¥–∞–ª–∞—Å—å: {e}")

    user_id = message.from_user.id
    chat_id = message.chat.id
    key = (user_id, chat_id)
    to_delete = user_group_messages.get(key, [])
    deleted = 0

    for msg_id in to_delete:
        try:
            await message.bot.delete_message(chat_id, msg_id)
            deleted += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    user_group_messages[key].clear()

    confirmation = await message.answer(f"üõâ –®–∞–ª–æ—Å—Ç—å —É–¥–∞–ª–∞—Å—å! –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞.")
    await asyncio.sleep(5)
    try:
        await confirmation.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.callback_query.register(handle_callback)
    dp.message.register(armant_menu_command, Command("aa1"))
    dp.message.register(alice_menu_command, Command("frolova"))
    dp.message.register(clear_user_messages, Command("—à–∞–ª–æ—Å—Ç—å_—É–¥–∞–ª–∞—Å—å"))

from aiogram import types

