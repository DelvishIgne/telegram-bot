import logging
import os
import json
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from bot.loader import bot, dp, logger
from bot.handlers import register_handlers

# üìç URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = "https://ezotarot.com/proxy.php"

# üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
WEBHOOK_PATH = "/"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))

# üöÄ Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—É—Å—Ç—ã—Ö/–±–∏—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@web.middleware
async def json_guard_middleware(request, handler):
    try:
        raw_data = await request.text()
        if not raw_data.strip():
            return web.Response(text="‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", status=400)
        json.loads(raw_data)
    except Exception as e:
        return web.Response(text=f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}", status=400)
    return await handler(request)

# üöÄ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(app: web.Application):
    logger.info("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ %s...", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# üõÑ –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
async def on_shutdown(app: web.Application):
    logger.info("üõ†Ô∏è –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é...")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("üåê –°–µ—Å—Å–∏—è Telegram-–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# üß† –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    register_handlers(dp)
    app = web.Application(middlewares=[json_guard_middleware])
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)

    logger.info(f"üîÅ –ó–∞–ø—É—Å–∫ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()